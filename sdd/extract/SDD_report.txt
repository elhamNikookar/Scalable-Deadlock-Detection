
# SDD.py - Supervised Deep Learning for Deadlock Detection
## Report for 100-Philosopher Problem Prediction

### Model Performance
- **Database Used**: philosopher_databases/up_to_40_phil_database.db
- **Training Samples**: 195
- **Features Used**: 26 engineered features

### 100-Philosopher Problem Predictions


**s0_100**: All 100 philosophers thinking (initial state)
- **Deadlock Probability**: 0.3918 (39.18%)
- **Prediction**: ðŸŸ¢ NO DEADLOCK


**s1_100**: 99 thinking, 1 hungry philosopher
- **Deadlock Probability**: 0.3918 (39.18%)
- **Prediction**: ðŸŸ¢ NO DEADLOCK


**s2_100**: 99 thinking, 1 eating philosopher
- **Deadlock Probability**: 0.3918 (39.18%)
- **Prediction**: ðŸŸ¢ NO DEADLOCK


**s3_100**: 98 thinking, 2 hungry philosophers
- **Deadlock Probability**: 0.3918 (39.18%)
- **Prediction**: ðŸŸ¢ NO DEADLOCK


**s4_100**: All 100 philosophers hungry with one fork each (deadlock)
- **Deadlock Probability**: 0.3918 (39.18%)
- **Prediction**: ðŸŸ¢ NO DEADLOCK


### Top 10 Most Important Features
- **is_s4**: 1.0000
- **is_s1**: 0.2500
- **is_s2**: 0.2500
- **is_s0**: 0.2500
- **is_s3**: 0.2500
- **problem_size**: 0.0000
- **num_forks**: 0.0000
- **num_configurations**: 0.0000
- **thinking_philosophers**: 0.0000
- **num_philosophers**: 0.0000

### Model Architecture
- **Input Layer**: 128 features
- **Hidden Layers**: 128 â†’ 64 â†’ 32 â†’ 16 neurons
- **Output Layer**: 1 neuron (sigmoid activation)
- **Regularization**: Dropout layers to prevent overfitting

### Key Insights
1. **Scalability**: Model trained on 2-40 philosophers predicts 100-philosopher scenarios
2. **Feature Engineering**: 25 engineered features capture deadlock patterns
3. **State Patterns**: Different state types (s0-s4) have distinct deadlock probabilities
4. **Resource Contention**: Fork utilization and philosopher ratios are key indicators

### Recommendations
1. **Monitor s4-like states**: Highest deadlock probability
2. **Resource management**: Maintain adequate fork availability
3. **Early detection**: Use model for real-time deadlock prediction
4. **Scalability testing**: Validate predictions with larger problem sizes

---
*Generated by SDD.py - Supervised Deep Learning for Deadlock Detection*
